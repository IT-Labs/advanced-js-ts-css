.default-div {
  background-color: coral;
  /* height: 50px;
  width: 300px; */
  /* we can add width and height but the element with a display block will reserve the entire width. */
}

.span1 {
  background-color: cornflowerblue;
  width: 300px;
  /* width and height are ignored for display: inline */
  /* display inline take minimum amount of space possible */
}

.span2 {
  background-color: khaki;
  height: 50px;
  /* width and height are ignored for display: inline */
}

.span3 {
  background-color: aqua;
  display: inline-block;
  height: 50px;
  width: 300px;
  /* on inline-block elements we can set width and height properties */
}

.spanNone {
  display: none;
  background-color: yellow;
}

.flex-container{
  border: 1px solid gray;
  margin-top: 20px;
  padding: 10px;
  background-color: azure;
  display: flex;
  justify-content: space-around; /* Aligns flex items along the main axis of the current line of the flex container. */
  align-items: flex-start; /* Aligns flex items along the cross axis of the current line of the flex container. */
}

.flex-container-vertical{
  flex-direction: column;
  height: 400px;
}

.flex-item{
  border: 1px solid gray;
  background-color: white;
  width: 200px;
  text-align: center;
}

.first-div{
  min-height: 50px;
  /* align-self: center;  */
  /* align-self allows the default alignment along the cross axis to be overridden for individual flex items. */
  /* flex: 1 0 200px; */
  /* The flex property is a shorthand property for: flex-grow, flex-shrink, flex-basis */
  /* flex-shrink: 0; */
}

.second-div{
  min-height: 80px;  
  /* flex-grow: 2;
  flex-basis: 0; */
}

.third-div{
  min-height: 100px;  
  /* flex-grow: 1;
  flex-basis: 0; */
}